// <auto-generated />
using System;
using JobService.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace JobService.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250827080042_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("JobService.Domain.Jobs.Job", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at_utc")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("description");

                    b.PrimitiveCollection<string[]>("MediaKeys")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("media_keys");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("owner_id");

                    b.Property<DateTime?>("PublishedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("published_at_utc");

                    b.PrimitiveCollection<string[]>("RequestedSkills")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("requested_skills");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("title");

                    b.Property<int>("Urgency")
                        .HasColumnType("integer")
                        .HasColumnName("urgency");

                    b.HasKey("Id");

                    b.HasIndex("Status", "OwnerId");

                    b.ToTable("jobs", (string)null);
                });

            modelBuilder.Entity("JobService.Domain.Jobs.Job", b =>
                {
                    b.OwnsOne("JobService.Domain.Jobs.Location", "Location", b1 =>
                        {
                            b1.Property<Guid>("JobId")
                                .HasColumnType("uuid");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("city");

                            b1.Property<string>("District")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("district");

                            b1.Property<double?>("Lat")
                                .HasColumnType("double precision")
                                .HasColumnName("lat");

                            b1.Property<double?>("Lng")
                                .HasColumnType("double precision")
                                .HasColumnName("lng");

                            b1.HasKey("JobId");

                            b1.HasIndex("City", "District");

                            b1.ToTable("jobs");

                            b1.WithOwner()
                                .HasForeignKey("JobId");
                        });

                    b.Navigation("Location")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
